#include<bits/stdc++.h>#include<iostream>using namespace std;#define ll long long int#define vi vector<ll>#define mt make_tuple#define eb emplace_back#define pob pop_back#define prio priority_queue#define inf 1e9#define mod 1000000007void int_code(){	ios_base::sync_with_stdio(0);	cin.tie(0);	cout.tie(0);	#ifndef ONLINE_JUDGE      freopen("input.txt", "r", stdin);      freopen("output.txt", "w", stdout);    #endif // ONLINE_JUDGE}struct node{	int data;	node* left;	node* right;	node(int d){		this->data=d;		left=NULL;		right=NULL;	}};node* BuildTree(vector<int> &preorder,int prestart,int preend,	vector<int> &inorder,int instart,int inend,map<int, int> &imap){	if(prestart>preend || instart>inend) return NULL;	node* root=new node(preorder[prestart]);	int inRoot=imap[root->data];	int numleft=inRoot-instart;	root->left=BuildTree(preorder,prestart+1,prestart+numleft,inorder,instart,inRoot-1,imap);	root->right=BuildTree(preorder,prestart+numleft+1,preend,inorder,inRoot+1,inend,imap);	return root;}node* BuildFun(vector<int> &inorder,vector<int> &preorder){	std::map<int, int> imap;	for(int i=0;i<inorder.size();i++){		imap[inorder[i]]=i;	}	node* root=BuildTree(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,imap);	return root;}void preorder(node* root){	if(root==NULL) return;	cout<<root->data<<" ";	preorder(root->left);	preorder(root->right);}int main(int argc, char const *argv[]){	/* code */    clock_t begin=clock();	int_code();	int in,pre;	cin>>in>>pre;	std::vector<int> inorder(in);	std::vector<int> preorder(pre);	for(int i=0;i<in;i++){		cin>>inorder[i];	}	for(int i=0;i<pre;i++){		cin>>preorder[i];	}	node* root=BuildFun(inorder,preorder);	cout<<'\n';	preorder(root);	#ifndef ONLINE_JUDGE	  clock_t end=clock();	  cout<<"\n\n Executed In: "<<double(end-begin) /1000<<" ms";	#endif	return 0;}